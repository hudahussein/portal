!function (D) { D.extend(D.ui, { multiDatesPicker: { version: "1.6.4" } }), D.fn.multiDatesPicker = function (s) { var r = arguments, c = this, i = (new Date, new Date(0), {}); function o(e, t) { t = t || "picked", e = n.call(this, e); for (var i = 0; i < this.multiDatesPicker.dates[t].length; i++) if (!u.compareDates(this.multiDatesPicker.dates[t][i], e)) return this.multiDatesPicker.dates[t].splice(i, 1).pop() } function l(e, t) { return t = t || "picked", this.multiDatesPicker.dates[t].splice(e, 1).pop() } function a(e, t, i) { t = t || "picked", (e = n.call(this, e)).setHours(0), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0), !1 === u.gotDate.call(this, e, t) && (this.multiDatesPicker.dates[t].push(e), i || this.multiDatesPicker.dates[t].sort(u.compareDates)) } function n(e, t, i) { return t = t || "object", u.dateConvert.call(this, e, t, i) } var u = { init: function (e) { var t = D(this); this.multiDatesPicker.changed = !1; var i, a = { beforeShow: function (e, t) { this.multiDatesPicker.changed = !1, this.multiDatesPicker.originalBeforeShow && this.multiDatesPicker.originalBeforeShow.call(this, e, t) }, onSelect: function (e, t) { var i = D(this); if (this.multiDatesPicker.changed = !0, e && (i.multiDatesPicker("toggleDate", e), this.multiDatesPicker.changed = !0), "normal" == this.multiDatesPicker.mode && this.multiDatesPicker.pickableRange) if (0 < this.multiDatesPicker.dates.picked.length) { var a = this.multiDatesPicker.dates.picked[0], s = new Date(a.getTime()); if (u.sumDays(s, this.multiDatesPicker.pickableRange - 1), this.multiDatesPicker.adjustRangeToDisabled) { var r, c = this.multiDatesPicker.dates.disabled.slice(0); do { for (var o = r = 0; o < c.length; o++) c[o].getTime() <= s.getTime() && (a.getTime() <= c[o].getTime() && c[o].getTime() <= s.getTime() && r++, c.splice(o, 1), o--); s.setDate(s.getDate() + r) } while (0 != r) } this.multiDatesPicker.maxDate && s > this.multiDatesPicker.maxDate && (s = this.multiDatesPicker.maxDate), i.datepicker("option", "minDate", a).datepicker("option", "maxDate", s) } else i.datepicker("option", "minDate", this.multiDatesPicker.minDate).datepicker("option", "maxDate", this.multiDatesPicker.maxDate); this.multiDatesPicker.originalOnSelect && e && this.multiDatesPicker.originalOnSelect.call(this, e, t) }, beforeShowDay: function (e) { var t = D(this), i = !1 !== t.multiDatesPicker("gotDate", e), a = t.datepicker("option", "disabled"), s = !1 !== t.multiDatesPicker("gotDate", e, "disabled"), r = this.multiDatesPicker.maxPicks <= this.multiDatesPicker.dates.picked.length, c = [!0, "", null]; return this.multiDatesPicker.originalBeforeShowDay && (c = this.multiDatesPicker.originalBeforeShowDay.call(this, e)), c[1] = i ? "ui-state-highlight " + c[1] : c[1], c[0] = c[0] && !(a || s || r && !c[1]), c } }; t.val() && (i = t.val()), e ? (e.separator && (this.multiDatesPicker.separator = e.separator), this.multiDatesPicker.separator || (this.multiDatesPicker.separator = ", "), this.multiDatesPicker.originalBeforeShow = e.beforeShow, this.multiDatesPicker.originalOnSelect = e.onSelect, this.multiDatesPicker.originalBeforeShowDay = e.beforeShowDay, this.multiDatesPicker.originalOnClose = e.onClose, t.datepicker(e), this.multiDatesPicker.minDate = D.datepicker._determineDate(this, e.minDate, null), this.multiDatesPicker.maxDate = D.datepicker._determineDate(this, e.maxDate, null), e.addDates && u.addDates.call(this, e.addDates), e.addDisabledDates && u.addDates.call(this, e.addDisabledDates, "disabled"), u.setMode.call(this, e)) : t.datepicker(), t.datepicker("option", a), i && t.multiDatesPicker("value", i); var s = t.multiDatesPicker("value"); t.val(s); var r = t.datepicker("option", "altField"); r && D(r).val(s), t.datepicker("refresh") }, compareDates: function (e, t) { e = n.call(this, e), t = n.call(this, t); var i = e.getFullYear() - t.getFullYear(); return i = i || ((i = e.getMonth() - t.getMonth()) || e.getDate() - t.getDate()) }, sumDays: function (e, t) { var i = typeof e; return obj_date = n.call(this, e), obj_date.setDate(obj_date.getDate() + t), n.call(this, obj_date, i) }, dateConvert: function (e, t, i) { var a = typeof e, s = D(this); if (a == t) { if ("object" == a) try { e.getTime() } catch (e) { return D.error("Received date is in a non supported format!"), !1 } return e } switch (void 0 === e && (e = new Date(0)), "string" != t && "object" != t && "number" != t && D.error('Date format "' + t + '" not supported!'), i || (i = s.datepicker("option", "dateFormat") || D.datepicker._defaults.dateFormat), a) { case "object": break; case "string": e = D.datepicker.parseDate(i, e); break; case "number": e = new Date(e); break; default: D.error('Conversion from "' + t + '" format not allowed on jQuery.multiDatesPicker') } switch (t) { case "object": return e; case "string": return D.datepicker.formatDate(i, e); case "number": return e.getTime(); default: D.error('Conversion to "' + t + '" format not allowed on jQuery.multiDatesPicker') } return !1 }, gotDate: function (e, t) { t = t || "picked"; for (var i = 0; i < this.multiDatesPicker.dates[t].length; i++) if (0 === u.compareDates.call(this, this.multiDatesPicker.dates[t][i], e)) return i; return !1 }, value: function (e) { if (!e || "string" != typeof e) { var t = u.getDates.call(this, "string"); return t.length ? t.join(this.multiDatesPicker.separator) : "" } u.addDates.call(this, e.split(this.multiDatesPicker.separator)) }, getDates: function (e, t) { switch (t = t || "picked", e = e || "string") { case "object": return this.multiDatesPicker.dates[t]; case "string": case "number": var i = new Array; for (var a in this.multiDatesPicker.dates[t]) i.push(n.call(this, this.multiDatesPicker.dates[t][a], e)); return i; default: D.error('Format "' + e + '" not supported!') } }, addDates: function (e, t) { if (0 < e.length) switch (t = t || "picked", typeof e) { case "object": case "array": if (e.length) { for (var i = 0; i < e.length; i++) a.call(this, e[i], t, !0); (function (e) { e = e || "picked", this.multiDatesPicker.dates[e].sort(u.compareDates) }).call(this, t); break } case "string": case "number": a.call(this, e, t); break; default: D.error('Date format "' + typeof e + '" not allowed on jQuery.multiDatesPicker') } else D.error("Empty array of dates received.") }, removeDates: function (e, t) { t = t || "picked"; var i = []; if ("[object Array]" === Object.prototype.toString.call(e)) for (var a in e.sort(function (e, t) { return t - e })) i.push(o.call(this, e[a], t)); else i.push(o.call(this, e, t)); return i }, removeIndexes: function (e, t) { t = t || "picked"; var i = []; if ("[object Array]" === Object.prototype.toString.call(e)) for (var a in e.sort(function (e, t) { return t - e })) i.push(l.call(this, e[a], t)); else i.push(l.call(this, e, t)); return i }, resetDates: function (e) { e = e || "picked", this.multiDatesPicker.dates[e] = [] }, toggleDate: function (e, t) { switch (t = t || "picked", this.multiDatesPicker.mode) { case "daysRange": this.multiDatesPicker.dates[t] = []; var i = this.multiDatesPicker.autoselectRange[1], a = this.multiDatesPicker.autoselectRange[0]; i < a && (i = this.multiDatesPicker.autoselectRange[0], a = this.multiDatesPicker.autoselectRange[1]); for (var s = a; s < i; s++) u.addDates.call(this, u.sumDays.call(this, e, s), t); break; default: !1 === u.gotDate.call(this, e) ? u.addDates.call(this, e, t) : u.removeDates.call(this, e, t) } }, setMode: function (e) { D(this); switch (e.mode && (this.multiDatesPicker.mode = e.mode), this.multiDatesPicker.mode) { case "normal": for (option in e) switch (option) { case "maxPicks": case "minPicks": case "pickableRange": case "adjustRangeToDisabled": this.multiDatesPicker[option] = e[option] } break; case "daysRange": case "weeksRange": var t = 1; for (option in e) switch (option) { case "autoselectRange": t--; case "pickableRange": case "adjustRangeToDisabled": this.multiDatesPicker[option] = e[option] } 0 < t && D.error("Some mandatory options not specified!") } i.onSelect && i.onSelect() }, destroy: function () { this.multiDatesPicker = null, D(this).datepicker("destroy") } }; return this.each(function () { var e = D(this); if (this.multiDatesPicker || (this.multiDatesPicker = { dates: { picked: [], disabled: [] }, mode: "normal", adjustRangeToDisabled: !0 }), u[s]) { var t = u[s].apply(this, Array.prototype.slice.call(r, 1)); switch (s) { case "removeDates": case "removeIndexes": case "resetDates": case "toggleDate": case "addDates": var i = e.datepicker("option", "altField"), a = u.value.call(this); void 0 !== i && "" != i && D(i).val(a), e.val(a), D.datepicker._refreshDatepicker(this) } switch (s) { case "removeDates": case "getDates": case "gotDate": case "sumDays": case "compareDates": case "dateConvert": case "value": c = t } return t } return "object" != typeof s && s ? (D.error("Method " + s + " does not exist on jQuery.multiDatesPicker"), !1) : u.init.apply(this, r) }), c }; var e = (new Date).getTime(); D.multiDatesPicker = { version: !1 }, D.multiDatesPicker.initialized = !1, D.multiDatesPicker.uuid = (new Date).getTime(), D.multiDatesPicker.version = D.ui.multiDatesPicker.version, D.multiDatesPicker._hideDatepicker = D.datepicker._hideDatepicker, D.datepicker._hideDatepicker = function () { var e = this._curInst.input[0], t = e.multiDatesPicker; return !t || !1 === this._curInst.inline && !t.changed ? D.multiDatesPicker._hideDatepicker.apply(this, arguments) : (t.changed = !1, void D.datepicker._refreshDatepicker(e)) }, window["DP_jQuery_" + e] = D }(jQuery);